0
1
00:00:02,400 --> 00:00:07,640
Welcome back. In the previous step, we discussed the fact that we are using in-memory authentication, and
1

2
00:00:07,770 --> 00:00:14,180
we are using a specific kind of encoding for this specific password.
2

3
00:00:14,220 --> 00:00:17,380
Let's explore that further and try and create another user.
3

4
00:00:17,490 --> 00:00:23,160
If you're going to do web security config, This is where we specified the algorithm which we use. We use
4

5
00:00:23,160 --> 00:00:28,350
the new Bscript password encoder as the encoder.
5

6
00:00:28,950 --> 00:00:37,140
Now, I'll create a main file. So I'll just go to the root and create a new Java class.
6

7
00:00:37,970 --> 00:00:42,450
And let's call this B crypt encoder.
7

8
00:00:44,040 --> 00:00:47,290
test, and we want to add in our main method.
8

9
00:00:47,670 --> 00:00:53,200
So what I would want to do, is I would want to set create a new user with the specific password.
9

10
00:00:53,450 --> 00:00:59,040
So let's use the B crypt encoder control - 1, let's type in new B crypt encoder, to assign
10

11
00:00:59,040 --> 00:01:03,640
it to a new variable and call this encoder.
11

12
00:01:03,820 --> 00:01:10,920
And if you look at the encoder, it provides encode method which you can send a password out.
12

13
00:01:10,930 --> 00:01:14,070
So let's check out the password I would want to set.
13

14
00:01:14,440 --> 00:01:26,030
Let's make it a little tricky. When password add one to the end at hash this.
14

15
00:01:26,040 --> 00:01:29,570
So let's say this is the password I would want to encode.
15

16
00:01:29,610 --> 00:01:36,310
Let's send this. So a new of encoder string.
16

17
00:01:36,360 --> 00:01:40,550
Now I can do this in a loop. for
17

18
00:01:40,730 --> 00:01:51,660
i , i <= 10, i++ . let's initialize it to 0, or 1 should be fine,
18

19
00:01:51,660 --> 00:01:52,090
I think
19

20
00:01:55,450 --> 00:02:01,640
and let's sysout the encoded string.
20

21
00:02:02,100 --> 00:02:03,740
Let's run this right now.
21

22
00:02:03,930 --> 00:02:11,530
Right click on our application, you would see that there are a number of hash values which are printed
22

23
00:02:11,580 --> 00:02:12,000
in here.
23

24
00:02:12,000 --> 00:02:18,720
Let's take the last one, and what I do is, in here that configure a new user.
24

25
00:02:19,010 --> 00:02:20,590
So I'll use this as the hash.
25

26
00:02:20,760 --> 00:02:24,700
And let's say good. I believe this too long.
26

27
00:02:25,580 --> 00:02:31,930
ranga, and later, this is the hash value that we would want to put in here.
27

28
00:02:33,700 --> 00:02:35,930
And let's leave the role as 
28

29
00:02:35,960 --> 00:02:44,590
ROLE_USER_2. That time, I'm saving this. Now when I go to the client, and when you say localhost:8080/authenticate
29

30
00:02:45,040 --> 00:02:50,650
and you provide the user name as ranga and password that's what we have put in here.
30

31
00:02:50,710 --> 00:02:53,070
So I put the password in it, and called it.
31

32
00:02:53,080 --> 00:02:57,890
So you take this password and you put it as the password in here.
32

33
00:02:58,000 --> 00:02:59,800
You can remove the authorization header.
33

34
00:02:59,800 --> 00:03:01,980
The only thing which you didn't want is this.
34

35
00:03:02,080 --> 00:03:05,840
So if you do a request to this you would see that it would succeed fine.
35

36
00:03:05,900 --> 00:03:12,170
So you would get that 200 and you would get a token back. You can add new users.
36

37
00:03:12,360 --> 00:03:18,130
In this quick step, we looked at how do I add a new user with the encoded password. In the next step,
37

38
00:03:18,130 --> 00:03:21,090
Let's look at a few other things. Until then, bye!
