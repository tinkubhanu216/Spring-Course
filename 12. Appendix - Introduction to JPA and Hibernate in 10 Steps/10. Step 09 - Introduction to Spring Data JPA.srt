1
00:00:01,870 --> 00:00:08,600
In the last few steps, we created an entity called user and we started managing it with user dao service

2
00:00:08,970 --> 00:00:11,360
Let’s say I want to create another entity.

3
00:00:11,540 --> 00:00:15,770
What I would need to do in that kind of a situation is to manage it,

4
00:00:16,070 --> 00:00:19,030
I would need to again go and create another dao service.

5
00:00:19,070 --> 00:00:26,690
So let's say I would want to create another entity so some entity dao service and to insert here I

6
00:00:26,690 --> 00:00:31,170
would say some entity and let's just call this entity.

7
00:00:31,220 --> 00:00:36,250
Here you are writing a user down service it's very similar to some other entity dao service.

8
00:00:36,440 --> 00:00:38,520
So here we are just inserting the data.

9
00:00:38,630 --> 00:00:45,240
But consider the schenario when I'm inserting, I am retrieving data, I’m deleting updating, updating… and

10
00:00:45,260 --> 00:00:46,710
all that kind of stuff.

11
00:00:46,730 --> 00:00:53,270
So if I have a lot of methods here then those kind of methods are repeated again and again for all the

12
00:00:53,270 --> 00:00:59,600
different entities. If I have 15 entities I would have 15 dao services which would be having very similar

13
00:00:59,600 --> 00:01:05,370
logic. So irrespective of the entity, you have to interact with the entity manager to manage it.

14
00:01:05,390 --> 00:01:11,600
So you have to either call persist method or you would have to call something like a merge method or you would

15
00:01:11,600 --> 00:01:13,500
need to call a remove method.

16
00:01:13,810 --> 00:01:20,900
Or you’d have to call one of the variations of the find method. Spring data wants to solve that problem.

17
00:01:20,990 --> 00:01:28,610
What Spring data says, you just define your interfaces you. Define your repository interfaces and I will

18
00:01:28,700 --> 00:01:31,130
take care of implementing them.

19
00:01:31,160 --> 00:01:38,990
So if I want to just do a user dao service,  instead of that I can create a simple repository with a small

20
00:01:38,990 --> 00:01:43,940
method in the interface and Spring data says, I'll provide the implementation for you.

21
00:01:44,060 --> 00:01:50,450
I'll be able to talk to the entity manager and do what you'd want. The specific implementation or the

22
00:01:50,460 --> 00:01:54,110
specific module for JPA is spring data

23
00:01:54,110 --> 00:02:02,440
JPA. Lets now use spring data JPA to create a simple repository. The way we do that is very simple.

24
00:02:02,450 --> 00:02:05,940
All that we need to say is file new interface.

25
00:02:06,020 --> 00:02:09,880
The most important thing is we are creating just a simple interface.

26
00:02:09,930 --> 00:02:12,880
We are not going to provide the implementation.

27
00:02:12,980 --> 00:02:16,840
The implementation would be provided by Spring data JPA. With this interface

28
00:02:16,850 --> 00:02:23,870
we need to implement or extend actually. Another interface which is present inside the Spring data JPA which is

29
00:02:24,260 --> 00:02:27,730
JPA repository. So import the JPA repository.

30
00:02:27,800 --> 00:02:32,990
When we are extending the JPA repository we need to provide, what is the entity that you would

31
00:02:32,990 --> 00:02:38,450
want to manage. The entity we would want to manage is the user. I would want to manage user and the other

32
00:02:38,450 --> 00:02:43,690
thing I would need to provide is the primary key. The primary key of the user is long.

33
00:02:43,720 --> 00:02:48,170
This is all you would need to be able to create a repository.

34
00:02:48,170 --> 00:02:52,710
Now I would want to use this repository from our command line runner.

35
00:02:52,730 --> 00:02:57,650
So what I'll do is I'll go ahead and create another command line runner. I'm copying …copying the user service

36
00:02:57,650 --> 00:03:04,610
user dao service. I would actually call this now user repository command line runner because it uses the

37
00:03:04,610 --> 00:03:08,710
user repository. I’ll open up the user repository command line runner.

38
00:03:09,020 --> 00:03:10,500
I’d want to change this.

39
00:03:10,550 --> 00:03:16,570
I would not want to use user dao service, I would want to use user repository now. So import user repository.

40
00:03:16,700 --> 00:03:26,330
Instead of Jack, I would want to let's say insert Jill from here. I'll use the user repository dot save and say user.

41
00:03:26,360 --> 00:03:32,780
One important thing about the user repository is the fact that whether you want to update or insert,

42
00:03:33,200 --> 00:03:35,920
you would use the same method which is save.

43
00:03:36,080 --> 00:03:38,340
This would actually return a user back.

44
00:03:38,480 --> 00:03:40,390
I would not need to worry about it so I’ll say

45
00:03:40,410 --> 00:03:43,410
user repository dot save user.

46
00:03:43,760 --> 00:03:46,930
Let's now run the application and see what happens.

47
00:03:47,040 --> 00:03:49,520
I'll stop this and start the application.

48
00:03:49,520 --> 00:03:54,620
You’d see that the insert queries are fired twice because we have two runners. We have one runner

49
00:03:54,620 --> 00:03:56,140
which is making use of the dao service.

50
00:03:56,130 --> 00:04:02,720
The other runner which is making use of the user repository. And you'd see that new user created

51
00:04:02,720 --> 00:04:04,410
would be printed twice.

52
00:04:04,430 --> 00:04:07,840
You can see that Jill is also now created.

53
00:04:08,030 --> 00:04:15,460
What we did in this step is actually we used a simple user repository instead of the user

54
00:04:15,530 --> 00:04:23,840
dao service. The user repository kind of acts as a shortcut to manage your entities. Instead of writing a

55
00:04:23,840 --> 00:04:25,610
lot of dao services,

56
00:04:25,680 --> 00:04:31,670
with very similar logic, so you would have the same insert, persist logic, merge logic, find and all that kind of

57
00:04:31,670 --> 00:04:31,960
stuff.

58
00:04:31,970 --> 00:04:39,800
Instead of using that kind of logic spring data JPA provides a common abstraction called JPA repository.

59
00:04:39,800 --> 00:04:46,550
If you extend the JPA repository and provide the entity you'd want to manage, you'd get all the different

60
00:04:46,610 --> 00:04:53,180
methods that are provided. A varied range of methods that are provided for doing all kind of operations

61
00:04:53,630 --> 00:04:55,240
with your entities.

62
00:04:55,250 --> 00:04:59,200
In this step, we looked at one of the operations that was present.

63
00:04:59,210 --> 00:05:06,650
What we did from the user repository command line runner is we made use of the Save method. What we'll do

64
00:05:06,650 --> 00:05:14,120
in the next step is make use of more methods that are defined in spring data JPA. Until the next step, bye-bye.
