1
00:00:02,490 --> 00:00:10,740
In the previous steps, we created entity. We created dao service and we created a command line runner to be able

2
00:00:10,740 --> 00:00:12,960
to save the data down to the database.

3
00:00:12,970 --> 00:00:16,250
However, there were a lot of unanswered questions.

4
00:00:16,270 --> 00:00:19,040
The first one is where is the database created?

5
00:00:19,200 --> 00:00:25,960
What schema is used to create the tables? Where are the tables created? And so on and so forth.

6
00:00:26,120 --> 00:00:29,590
In this step, let’s answer all those questions.

7
00:00:29,730 --> 00:00:37,710
The simple answer is - all the magic is happening because of Spring Boot and its starter projects.

8
00:00:37,860 --> 00:00:39,880
Let's open up our pom dot xml.

9
00:00:40,050 --> 00:00:45,540
When we created this project using spring initialiser at start dot spring dot io,

10
00:00:45,630 --> 00:00:50,450
we chose three important dependencies.

11
00:00:50,480 --> 00:00:58,660
We chose web, we chose a starter called starter data JPA and we chose H2 as the database.

12
00:00:58,770 --> 00:01:02,570
Let's focus on the in-memory database first.

13
00:01:02,610 --> 00:01:10,260
That’s H2.  Typically we are used to databases like MySQL, Oracle. For all those kind of databases

14
00:01:10,380 --> 00:01:15,690
you need to first install them on your machine then create the tables and then you would be able to

15
00:01:15,690 --> 00:01:17,940
save the data from the application.

16
00:01:17,940 --> 00:01:25,080
This would mean that there is a lot of set up involved. Other kind of databases, called in-memory databases.

17
00:01:25,110 --> 00:01:29,260
These databases are directly created inside the application.

18
00:01:29,290 --> 00:01:32,450
The Schemas are defined, the tables are created.

19
00:01:32,460 --> 00:01:33,890
The data is populated.

20
00:01:33,930 --> 00:01:40,200
And once the application stops, the entire database is destroyed and removed from memory.

21
00:01:40,200 --> 00:01:43,940
The great thing about these databases is you don't really need to maintain them.

22
00:01:43,950 --> 00:01:48,840
I don't really need to install manually. I don't need to install the tables in there and all that

23
00:01:48,840 --> 00:01:49,510
kind of stuff.

24
00:01:49,530 --> 00:01:55,280
I'm going to application dot properties. This is where we can configure this Spring Boot application.

25
00:01:55,410 --> 00:02:03,250
And what I would want to do is spring dot JPA dot show sql

26
00:02:03,270 --> 00:02:06,450
I am making it true.

27
00:02:06,630 --> 00:02:12,580
So I would want to show the SQL which is generated and the other setting I would want to turn on

28
00:02:12,690 --> 00:02:20,380
is something will spring dot H2 dot console dot enabled is equal to true.

29
00:02:20,520 --> 00:02:25,740
So I would want to see the SQL which is generated and I would also want to enable something called H2

30
00:02:25,740 --> 00:02:26,410
console.

31
00:02:26,550 --> 00:02:28,670
Let's stop the application and start it again.

32
00:02:28,800 --> 00:02:31,290
There are a few important things that you would see.

33
00:02:31,320 --> 00:02:36,090
You would see that there there's a sequence being created and the table being created as well.

34
00:02:36,090 --> 00:02:42,000
There's a sequence called hibernate sequence and the table called user bean created.

35
00:02:42,000 --> 00:02:47,100
The other thing you would see is that there is a insert into user name role Id.

36
00:02:47,130 --> 00:02:49,580
These are the queries which are being executed.

37
00:02:49,590 --> 00:02:53,330
I can see them now because I turned on logging for queries.

38
00:02:53,330 --> 00:02:55,820
I said spring dot JPA show sql true.

39
00:02:55,980 --> 00:03:00,600
We can see that the tables are… table is created and the data is inserted into it.

40
00:03:00,600 --> 00:03:02,670
Can I see the data in the database?

41
00:03:02,700 --> 00:03:09,000
One of the important things that you would need to note is the URL is localhost 8080 Slash H2 console.

42
00:03:09,080 --> 00:03:16,720
So it’s H2 hyphen console. localhost 8080  H2 console and we’d need to use a db url of JDBC H2

43
00:03:16,740 --> 00:03:21,710
mem test db. So jdbc h2 mem test db.

44
00:03:21,720 --> 00:03:28,330
So I'm going to H2 console. You can leave these as a default if we want to connect to the generic H2 embedded.

45
00:03:28,340 --> 00:03:30,470
And this is the JDBC url.

46
00:03:30,780 --> 00:03:37,230
So we're putting a JDBC url of JDBC H2 mem test db and I'm saying connect. And now you can see

47
00:03:37,230 --> 00:03:43,920
the database. You can see the user table. The user table is created - Id, name and role. You can do a select star

48
00:03:43,920 --> 00:03:50,520
from it. So I’m doing a select star from it and you can see the row which is inserted in. What I would recommend

49
00:03:50,520 --> 00:03:53,490
you to do is to play around with this.

50
00:03:53,490 --> 00:04:00,060
We saw that the database is created in memory using H2. We saw that this schema also is being created

51
00:04:00,060 --> 00:04:06,990
at application start up and also we saw the tables which were created. We saw the data in the database

52
00:04:07,020 --> 00:04:08,020
as well.

53
00:04:08,190 --> 00:04:11,300
Even then a couple of important questions remain.

54
00:04:11,340 --> 00:04:13,960
Who is creating the data source?

55
00:04:14,010 --> 00:04:16,220
How is the schema being generated?

56
00:04:16,230 --> 00:04:22,270
Answer to all that is spring boot and the auto configuration of spring boot.

57
00:04:22,470 --> 00:04:29,560
So the magic, the entire magic is done by spring boot auto configuration. To be able to understand spring

58
00:04:29,610 --> 00:04:39,530
boot auto configuration much more what we'll do is we'll turn on debug logging. logging dot level for org dot spring

59
00:04:39,960 --> 00:04:42,410
framework. So for spring framework.

60
00:04:42,450 --> 00:04:45,170
I'm turning on logging level to be debug.

61
00:04:45,360 --> 00:04:49,410
That's basically what we are doing in here and let's restart the application.

62
00:04:49,410 --> 00:04:55,700
If you look at the log now, because we turn on debug logging you'd see a lot more logging.

63
00:04:55,710 --> 00:04:59,870
There is something called an auto configuration report which is printed.

64
00:05:00,100 --> 00:05:03,070
I'll extract a few things from here.

65
00:05:03,070 --> 00:05:06,980
Here is a quick preview of what we observed in the log.

66
00:05:07,020 --> 00:05:10,270
One of things is Spring Boot is intelligent.

67
00:05:10,290 --> 00:05:17,100
It identifies if you are connecting to a in-memory database or not. Since it saw that there is H2 on

68
00:05:17,100 --> 00:05:19,110
the dependencies list,

69
00:05:19,110 --> 00:05:25,590
It has configured an in memory database H2. You are using H2 in memory database. So Spring Boot knows

70
00:05:25,590 --> 00:05:31,030
that if you're using an in memory database then you would want to initialize the schema.

71
00:05:31,200 --> 00:05:36,160
So it is able to understand whether your database is embedded or not.

72
00:05:36,180 --> 00:05:38,590
So it say, “OK! You’re using an embedded database,

73
00:05:38,640 --> 00:05:44,550
So you'd want be initialized the database.” So it uses hibernate property called create-drop.

74
00:05:44,670 --> 00:05:51,190
So it creates the schema at application launch up and drops the schema when the application is terminated.

75
00:05:51,330 --> 00:05:52,870
That number one.

76
00:05:52,950 --> 00:06:00,300
The other auto configuration stuff that is enabled is hibernate JPA auto configuration. Because we have

77
00:06:00,300 --> 00:06:05,730
hibernate on the classpath, hibernate JPA autoconfiguration is triggered.

78
00:06:05,910 --> 00:06:11,100
Other things which are auto configured are a data source and there's a data source which is auto configured

79
00:06:11,190 --> 00:06:12,930
and entity manager factory

80
00:06:12,930 --> 00:06:17,800
is auto configured and the transaction manager is auto configured.

81
00:06:17,850 --> 00:06:22,740
If you actually look through the log there are a lot of other stuff which is auto configured by spring

82
00:06:22,740 --> 00:06:23,160
boot.

83
00:06:23,180 --> 00:06:28,290
What we are looking at are some of the important things that are auto configured from the perspective

84
00:06:28,290 --> 00:06:35,960
of JPA and hibernate. Autoconfiguration is a very important feature of spring boot. Spring Boot,

85
00:06:36,030 --> 00:06:41,100
what it does is it looks at the classes which are available in the classpath, it looks at the jars which

86
00:06:41,100 --> 00:06:47,790
are available in the classpath and it decides what is the best configuration for you.

87
00:06:47,790 --> 00:06:54,510
For us it decided that because H2 is in the classpath, because Hibernate is in the classpath, I'm going

88
00:06:54,510 --> 00:06:56,460
to use hibernate with JPA.

89
00:06:56,480 --> 00:07:03,310
So I'm going to use Hibernate as the default implementation for JPA and it also decided that I would want

90
00:07:03,310 --> 00:07:10,350
to use H2 as in memory database and it autoconfigured the schema for me and also auto configured

91
00:07:10,720 --> 00:07:14,730
the NTD manager the data source and a transaction manager for us.

92
00:07:14,890 --> 00:07:17,500
So all this happened in the background.

93
00:07:17,740 --> 00:07:24,520
And that's why when we ran the application we were able to easily execute the queries against the database

94
00:07:24,550 --> 00:07:27,550
and insert a user row into the database.

95
00:07:27,580 --> 00:07:31,730
In this step we were trying to answer the important questions.

96
00:07:31,900 --> 00:07:34,580
Where is the database created? What schema is used?

97
00:07:34,580 --> 00:07:36,420
What are the tables created?

98
00:07:36,490 --> 00:07:39,010
How can we see the data in the database?

99
00:07:39,010 --> 00:07:43,130
How are we getting hibernate data source and all other stuff.

100
00:07:43,210 --> 00:07:50,950
We saw that the answer to all of this is spring boot and the in-memory database H2. We had to do

101
00:07:50,950 --> 00:07:55,720
no project set up, no configuration at all. Using an in memory database

102
00:07:55,720 --> 00:07:57,390
we don't really need to maintain anything.

103
00:07:57,390 --> 00:08:01,150
I don't really need to install a database or something of this kind.

104
00:08:01,150 --> 00:08:05,900
This makes it a great combination for learning and for writing unit tests.

105
00:08:05,920 --> 00:08:11,380
The other important thing is with little configuration, with some simple configuration in the application

106
00:08:11,380 --> 00:08:17,110
dot properties we can actually really connect to a SQL database or an Oracle database.

107
00:08:17,110 --> 00:08:22,680
The only problem with using an in memory database is the fact that the data is not persistent between

108
00:08:22,700 --> 00:08:23,200
restart.

109
00:08:23,210 --> 00:08:30,220
So as soon as you terminate the application the entire schema and the data is lost. In this course, at the start

110
00:08:30,220 --> 00:08:36,230
we would start using an in-memory database because of all the flexibilities it provides.
