1
00:00:02,570 --> 00:00:08,640
In the last step, we defined a simple entity. We would want to be able to save this entity to the database.

2
00:00:08,690 --> 00:00:15,350
What we would need to use? We’d need to use an entity manager. To be able to save this user entity to the

3
00:00:15,350 --> 00:00:18,270
database I’ll create something called a user.

4
00:00:18,270 --> 00:00:19,320
service.

5
00:00:19,400 --> 00:00:24,830
So let's say new user, new class. We’d want to call it user dao service.

6
00:00:24,850 --> 00:00:32,030
So we are creating this entity dao service in the sense that it's a data access object so this is something

7
00:00:32,030 --> 00:00:34,590
which helps us access data from the database.

8
00:00:34,590 --> 00:00:38,700
So that's why I'm calling it user dao service and clicking finish.

9
00:00:38,750 --> 00:00:42,240
One of the things that I would want to move this to a package. Instead of dot steps,

10
00:00:42,290 --> 00:00:48,090
I would want to actually create it in a service package. What I've done is I've moved the user dao service

11
00:00:48,100 --> 00:00:49,270
to the package

12
00:00:49,310 --> 00:00:50,430
JPA in 10 steps

13
00:00:50,450 --> 00:00:51,030
service.

14
00:00:51,070 --> 00:00:52,830
So now we have this class

15
00:00:52,970 --> 00:00:56,550
And in this class we would want to be able to manage user entity.

16
00:00:56,570 --> 00:01:01,700
We would to be able to save users and retrieve users from the database.

17
00:01:01,970 --> 00:01:07,970
One of the first things that we would need to do to be able to get the values from the database is create

18
00:01:07,970 --> 00:01:14,980
an instance of an entity manager. So I’ll create a private entity manager. I’ll import javax persistence entity 

19
00:01:15,010 --> 00:01:16,810
manager. With this entity manager

20
00:01:16,820 --> 00:01:26,150
I would want to be able to save data to the database. So I’ll create a save method. Public long insert and this

21
00:01:26,150 --> 00:01:35,660
would accept a user and save the user down to the database. Let’s input the user. How do I save the entity to the database?

22
00:01:35,680 --> 00:01:37,130
User is an entity, right?

23
00:01:37,130 --> 00:01:40,620
There is annotationat entity defined on it. How do I save it?

24
00:01:40,790 --> 00:01:47,750
Entity manager provides a method. So entity manager dot persist. Persist is this the method which can be

25
00:01:47,750 --> 00:01:53,780
used to make an instance managed and persistent. I’ll say persist

26
00:01:53,780 --> 00:01:56,470
and what we want to do is once the user is persisted

27
00:01:56,570 --> 00:02:03,700
We want to return the idea of the created one. So user dot get Id. This user dao interface

28
00:02:03,700 --> 00:02:08,200
is something which helps us store things to the database. In spring,

29
00:02:08,210 --> 00:02:13,540
we call that kind of component as a repository. So repository

30
00:02:13,550 --> 00:02:18,710
is an annotation. It is defined in Spring Framework. So you can look at it, org springframework stereotype.

31
00:02:18,730 --> 00:02:22,660
Repository indicates something which interacts with the database.

32
00:02:22,760 --> 00:02:29,150
The other thing is when we want to insert, we want to modify something to the database, you need to be

33
00:02:29,150 --> 00:02:31,410
inside a transaction.

34
00:02:31,550 --> 00:02:36,830
What we’d need to do is we’d need to be able to do something like open transaction here. Open transaction,

35
00:02:36,950 --> 00:02:41,740
make the change. Whatever changes that you would need to do and then close the transaction.

36
00:02:41,870 --> 00:02:49,370
Instead of implementing transaction management in each method, what JPA provides is a simple interface

37
00:02:49,370 --> 00:02:55,160
to do declarative transaction management. The way we can do that is by saying transactional.

38
00:02:55,520 --> 00:03:02,360
So you can use this annotation on the class as well as on the methods. We are using Javax dot transactional.

39
00:03:02,690 --> 00:03:04,640
That's the thing which is imported.

40
00:03:04,670 --> 00:03:09,470
So this says each method would be involved in a transaction.

41
00:03:09,580 --> 00:03:16,760
The other important thing that we’d need to understand is the concept of persistence context and how it

42
00:03:16,760 --> 00:03:19,450
relates with the entity manager.

43
00:03:19,610 --> 00:03:26,000
If I say user jack is equal to new user - Jack, admin. It creates an instance of the user. Here I'm creating

44
00:03:26,000 --> 00:03:30,810
another instance Jill. I'm saying entity manager dot persist Jack.

45
00:03:30,890 --> 00:03:37,300
So now Jack is something which is managed by the entity manager. Entity manager is

46
00:03:37,290 --> 00:03:41,060
actually an interface to the persistence context.

47
00:03:41,180 --> 00:03:47,060
When I say something dot persist Jack, what it does is it saves it to the database and also starts tracking

48
00:03:47,120 --> 00:03:49,730
it in the persistence context.

49
00:03:49,760 --> 00:03:54,000
Jack is now inside the persistence context.

50
00:03:54,110 --> 00:04:01,220
So whatever changes I make to the Jack are now being tracked by the persistence context. Important thing to understand

51
00:04:01,230 --> 00:04:06,350
is entity manager only tracks those objects which are persisted through it.

52
00:04:06,350 --> 00:04:12,060
So here I'm creating something call Jill. And Jill, I'm not doing anything with the entity manager to Jill.

53
00:04:12,320 --> 00:04:15,550
And I'm saying Jill dot set role, changing the role of Jill.

54
00:04:15,590 --> 00:04:18,500
This will not be tracked by the entity manager.

55
00:04:18,620 --> 00:04:26,160
Only those things which are in the persistence context are cracked by the entity manager.

56
00:04:26,330 --> 00:04:30,150
So we need to put an annotation so that this is autowired.

57
00:04:30,180 --> 00:04:33,360
So what is the annotation? It's persistence context.

58
00:04:33,530 --> 00:04:39,790
So I'm going to use a Javax annotation. Javax persistence annotation. Persistence Context.

59
00:04:39,910 --> 00:04:46,130
This is cool! Right? So I have a service which is having a simple method called insert to save the user.

60
00:04:46,130 --> 00:04:50,750
Now I would want to be able to call this and be able to save this data down to the database.

61
00:04:50,750 --> 00:04:52,180
Let's do that in the next step.
