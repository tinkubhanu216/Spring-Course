1
00:00:00,940 --> 00:00:02,890
In the last video, we talked about

2
00:00:02,900 --> 00:00:04,030
SOAP web services.

3
00:00:04,070 --> 00:00:09,020
And in this video, we'd start with an important concept called REST.

4
00:00:09,040 --> 00:00:10,260
What is the REST?

5
00:00:10,270 --> 00:00:11,530
What is REST all about?

6
00:00:11,590 --> 00:00:17,150
REST stands for representational state transfer. It’s a term which is

7
00:00:17,380 --> 00:00:20,140
Coined by Roy Fielding.

8
00:00:20,200 --> 00:00:25,520
If you remember, Roy Fielding is the guy who also developed HTTP protocol.

9
00:00:25,610 --> 00:00:34,090
The key thing about REST services is the fact that they would want to make best use of his HTTP.

10
00:00:34,330 --> 00:00:35,390
Ok! What is HTTP?

11
00:00:35,410 --> 00:00:36,920
Let's take a quick overview.

12
00:00:37,060 --> 00:00:40,640
Let's go to Google. I’ll type in www dot Google dot in.

13
00:00:40,730 --> 00:00:43,620
And I would want to search for what is a web service.

14
00:00:43,630 --> 00:00:52,120
The browser comes back with a response and I can choose one of these links and click it and then I can

15
00:00:52,120 --> 00:00:56,020
choose any of the links which are present in here as well.

16
00:00:56,020 --> 00:00:58,570
So this is how we typically browse the web.

17
00:00:58,600 --> 00:00:59,250
Right?

18
00:00:59,320 --> 00:01:02,910
This is how we browse the internet. While we were browsing

19
00:01:02,940 --> 00:01:05,920
There was a lot of things which were happening in the background.

20
00:01:05,930 --> 00:01:13,020
This is how a simple interaction happens between the browser and any of the servers of the websites you're

21
00:01:13,060 --> 00:01:13,920
visiting.

22
00:01:13,930 --> 00:01:21,940
For example, Google. What happens is when I enter a URL in the browser, a request is being sent

23
00:01:22,330 --> 00:01:24,370
to the website server.

24
00:01:24,980 --> 00:01:29,200
And the website server responds back with a response.

25
00:01:29,200 --> 00:01:37,510
The important thing that we would need to talk about is what is the format of this request and response.

26
00:01:37,600 --> 00:01:47,080
These requests and response are in a format which is defined by HTTP. Hypertext Transfer

27
00:01:47,080 --> 00:01:52,710
Protocol. When I type in a URL in the browser.

28
00:01:52,900 --> 00:01:56,060
It sends a GET request to that

29
00:01:56,080 --> 00:02:04,580
server. Server responds back with a HTTP response containing the HTML.

30
00:02:04,810 --> 00:02:14,200
So I'm sending a GET request and the server is sending back a response. A HTTP response containing

31
00:02:14,200 --> 00:02:15,700
the HTML.

32
00:02:16,060 --> 00:02:22,690
The browser looks at that response, takes the HTML and displays it on the screen.

33
00:02:22,780 --> 00:02:28,690
Let's say there's a form I'm filling up with a list of details and I click the submit button. In those

34
00:02:28,690 --> 00:02:37,060
kind of scenarios, typically, we are creating a post request. HTTP defines the headers which are present

35
00:02:37,060 --> 00:02:41,630
in the request and the body of the request. Also, along with the response

36
00:02:41,710 --> 00:02:45,140
there are headers and also the body.

37
00:02:45,430 --> 00:02:54,580
In addition to the request header and the request body HTTP also defines something called request

38
00:02:54,890 --> 00:03:03,700
methods. You can indicate what action you are doing by using the HTTP request methods. Get.

39
00:03:03,700 --> 00:03:07,310
I'm trying to get the details of something. Post.

40
00:03:07,420 --> 00:03:14,230
I'm trying to create something. Put. I am trying to update something. A HTTP response,

41
00:03:14,230 --> 00:03:23,140
on the other hand, will also include a HTTP response status code. Was it successful?

42
00:03:23,140 --> 00:03:26,930
Page not found? 404 and things like that.

43
00:03:26,950 --> 00:03:30,720
Roy Fielding said, “Why do we need to reinvent the wheel?”

44
00:03:30,880 --> 00:03:37,110
Why don't we make use of HTTP to develop our web services as well.

45
00:03:37,420 --> 00:03:44,170
And that's where the concept of RESTful web services comes in.

46
00:03:44,190 --> 00:03:52,450
RESTful web services try to define services using the different concepts that are already present

47
00:03:52,870 --> 00:04:02,800
in HTTP. The most important abstraction in the REST is something called a resource. A resource is anything

48
00:04:02,980 --> 00:04:08,830
that you'd want to expose to the outside world through your application.

49
00:04:08,860 --> 00:04:15,790
For example, when I talk about the TODO management application the users are a resource who is using

50
00:04:15,790 --> 00:04:16,350
it.

51
00:04:16,350 --> 00:04:19,600
Ranga is a resource. What are the TODOs

52
00:04:19,630 --> 00:04:26,860
also can be a resource. A specific TODO is a resource. A list of TODOs is also a resource. When we are

53
00:04:26,860 --> 00:04:29,720
talking about talking about RESTful services,

54
00:04:29,770 --> 00:04:33,700
we are always thinking about resources.

55
00:04:33,910 --> 00:04:35,550
What are the resources

56
00:04:35,560 --> 00:04:44,740
in my application. A TODO or user.  A list of TODOs? What we do is we would assign a URI to the

57
00:04:44,830 --> 00:04:46,000
resource.

58
00:04:46,000 --> 00:04:52,080
For example, the URI, the resource Ranga is slash user slash Ranga.

59
00:04:52,120 --> 00:05:00,920
URL to all the TODOs that Ranga has, slash user Ranga todos. The URI to first

60
00:05:00,920 --> 00:05:07,640
Resource that Ranga has is user Ranga todos slash one.

61
00:05:07,680 --> 00:05:13,860
So what we do is we assign a URI to each resource.

62
00:05:14,040 --> 00:05:19,000
REST does not worry about how you are representing your resource.

63
00:05:19,020 --> 00:05:20,390
Is it XML?

64
00:05:20,400 --> 00:05:24,460
Is it HTML? Is it JSON? That does not really matter.

65
00:05:24,480 --> 00:05:32,460
The most important thing is the fact that you define your resource and perform the actions on the resource

66
00:05:32,880 --> 00:05:38,760
using whatever facilities that are provided by HTTP. Just like we discussed earlier, if I wanted to create

67
00:05:38,760 --> 00:05:46,020
a resource I would do a post to slash users. If I want to delete something, do a delete to slash users

68
00:05:46,030 --> 00:05:50,900
slash one. get slash users. get slash users slash one.

69
00:05:50,910 --> 00:05:57,940
The important thing about REST is the fact that you have to think in terms of the resources.

70
00:05:58,020 --> 00:06:02,730
What are the different resources that are present in your application that you would want to expose

71
00:06:02,940 --> 00:06:05,460
to other applications.

72
00:06:05,520 --> 00:06:13,020
And the second thing is make use of the HTTP. If you want to do any operations on the resource you have

73
00:06:13,020 --> 00:06:22,280
to use the verbs which are already specified by HTTP. Get, Put, POST, FETCH and things like that. In rest,

74
00:06:22,290 --> 00:06:26,300
we don't really have any restriction on the data exchange format.

75
00:06:26,550 --> 00:06:32,610
While JSON is very popular, REST does not worry whether you are using JSON,  XML or whatever format

76
00:06:32,640 --> 00:06:33,870
you would want to use.

77
00:06:33,900 --> 00:06:41,430
Important thing is transport is always HTTP. REST is completely built on top of HTTP. There is

78
00:06:41,430 --> 00:06:47,580
no standard service definition which is attached with REST. That can be a drawback in some scenarios

79
00:06:47,610 --> 00:06:53,640
because when a client wants to consume a service it needs to understand the request format and response

80
00:06:53,640 --> 00:06:54,170
format too.

81
00:06:54,210 --> 00:07:01,310
So the service definition will be really useful. WADL.  Its called web application definition language

82
00:07:01,360 --> 00:07:06,050
WADL is one of the formats in which you can specify your RESTful Web services.

83
00:07:06,060 --> 00:07:08,610
It has not become very popular.

84
00:07:08,610 --> 00:07:10,420
Another option is Swagger.

85
00:07:10,470 --> 00:07:16,510
Swagger is gaining a lot of popularity and we would use swagger in this course for defining our RESTful

86
00:07:16,570 --> 00:07:24,870
services. REST focuses on your resources and how do you perform actions on them making best use of HTTP
