0
1
00:00:02,060 --> 00:00:03,140
Welcome back.
1

2
00:00:03,140 --> 00:00:09,200
In this step, we would want to create a simple controller, a Rest controller, which would retain some
2

3
00:00:09,290 --> 00:00:10,600
hardcoded text.
3

4
00:00:10,610 --> 00:00:14,620
This is like your Hello World RESTful Web Service.
4

5
00:00:14,660 --> 00:00:16,840
I wouldn't really call this RESTful Web Service,
5

6
00:00:17,160 --> 00:00:23,250
let's just call it a service which returns some text. I'm going to create a new class, Control N or command N,
6

7
00:00:23,680 --> 00:00:30,600
type in class and I would want to create a new class. I would want to call this HelloWorldController
7

8
00:00:31,090 --> 00:00:36,680
and click Finish. What I want to do in this HelloWorldController is, I would want to create a method
8

9
00:00:37,270 --> 00:00:39,920
and I would want this method to return
9

10
00:00:40,040 --> 00:00:41,080
Hello World.
10

11
00:00:41,110 --> 00:00:44,440
That's basically what we would want to do. Whenever we create a REST service,
11

12
00:00:44,450 --> 00:00:46,880
we would need to define two things, right.
12

13
00:00:46,880 --> 00:00:55,030
One is, what method. So, I would want to use GET method and I would want to use a URI.
13

14
00:00:55,130 --> 00:00:56,630
What URI do we want to use?
14

15
00:00:56,630 --> 00:00:57,350
I want to use the
15

16
00:00:57,350 --> 00:01:00,050
URI /hello-world.
16

17
00:01:00,440 --> 00:01:08,300
So, if somebody goes into their browser and sends a GET request to /hello-world, I would want
17

18
00:01:08,300 --> 00:01:10,370
to send him some text.
18

19
00:01:10,380 --> 00:01:14,190
That's basically all that I would want to do in this step.
19

20
00:01:14,270 --> 00:01:20,120
One of the first things that we would need to do is, to tell Spring that this is a controller.
20

21
00:01:20,510 --> 00:01:26,280
So, this is a controller in the sense that this would be handling HTTP requests.
21

22
00:01:26,300 --> 00:01:28,600
So, we need to tell Spring that this is a controller
22

23
00:01:28,670 --> 00:01:31,460
and next, we'd need to create a method.
23

24
00:01:31,940 --> 00:01:35,280
So, the method would be, let's say, public.
24

25
00:01:35,380 --> 00:01:42,320
It's returning a string Hello World. So, I'll call it String and let's call it helloWorld().
25

26
00:01:42,350 --> 00:01:44,420
What should this method do?
26

27
00:01:44,420 --> 00:01:48,500
Simple, right? We would want to return the string back. So, I would do that,
27

28
00:01:48,500 --> 00:01:52,110
return the string back. To this method,
28

29
00:01:52,160 --> 00:01:56,570
I'd need to map a GET request to the URI
29

30
00:01:56,810 --> 00:01:58,040
hello-world.
30

31
00:01:58,080 --> 00:01:58,630
There are two things
31

32
00:01:58,630 --> 00:01:59,500
now we have to do.
32

33
00:01:59,510 --> 00:02:01,460
One is to call this a controller.
33

34
00:02:01,460 --> 00:02:07,160
So, we need to say this is a controller and then, we would need to map a GET URI of /hello-
34

35
00:02:07,160 --> 00:02:08,180
world to this.
35

36
00:02:08,240 --> 00:02:08,960
How do we do that?
36

37
00:02:08,990 --> 00:02:11,700
Let's focus on the controller first.
37

38
00:02:12,250 --> 00:02:18,560
We'd want to tell Spring MVC that this is going to handle Rest requests.
38

39
00:02:18,590 --> 00:02:19,780
How do we do that? The way
39

40
00:02:19,820 --> 00:02:26,960
we would do that is by using something called Rest controller. So, @RestController.
40

41
00:02:26,970 --> 00:02:32,500
Now, this becomes a controller which can handle Rest requests.
41

42
00:02:32,540 --> 00:02:40,470
The next thing is to create a mapping for this method. I would want to map a GET request to this
42

43
00:02:40,500 --> 00:02:41,810
URI.
43

44
00:02:41,840 --> 00:02:46,550
One of the ways of doing that is to create a request mapping.
44

45
00:02:46,940 --> 00:02:48,550
So, I type in @RequestMapping,
45

46
00:02:48,560 --> 00:02:54,040
this is an annotation. I'll import the annotation. I pressed Control 1 and imported it in
46

47
00:02:54,130 --> 00:03:02,030
and here, I can define what is the request method. Request method that we want to use is, RequestMethod.Get.
47

48
00:03:02,130 --> 00:03:11,690
So, the method we want to use is, GET and the URI. How do we map the URI? That's by using
48

49
00:03:11,690 --> 00:03:18,700
the path. path="/hello-world".
49

50
00:03:18,830 --> 00:03:19,570
That's it.
50

51
00:03:19,890 --> 00:03:21,880
It's as simple as this. Now,
51

52
00:03:21,930 --> 00:03:25,590
let's start our RESTful Web Services Application.
52

53
00:03:25,650 --> 00:03:34,190
When I type in, localhost:8080/hello-world, you'd see Hello World displayed on the browser.
53

54
00:03:34,710 --> 00:03:41,850
What we have done until now is, we put a very simply annotation, @RestController, and then we mapped GET
54

55
00:03:41,850 --> 00:03:43,430
request to this URI
55

56
00:03:43,530 --> 00:03:51,500
to this method and whatever text which is returned by this particular method, it's displayed on the browser.
56

57
00:03:52,020 --> 00:03:56,140
We can improve this further. Instead of using @RequestMapping,
57

58
00:03:56,140 --> 00:04:02,530
there's an annotation called GetMapping. So, I can say, GetMapping, import GetMapping
58

59
00:04:02,610 --> 00:04:07,290
and now, I don't need to specify the method = RequestMethod.GET.
59

60
00:04:07,400 --> 00:04:12,810
So, I can say, GetMapping(path="/hello-world"). Similar to this,
60

61
00:04:12,810 --> 00:04:18,920
there would be other mappings like PostMapping, PutMapping, and other mappings that we would use in the
61

62
00:04:18,930 --> 00:04:20,760
subsequent steps.
62

63
00:04:20,760 --> 00:04:26,990
I like the @GetMapping annotation because it's quite short and it's very easy to read as well.
63

64
00:04:26,990 --> 00:04:30,930
So, I'm mapping a GET request to hello-world.
64

65
00:04:30,930 --> 00:04:33,240
Isn't that a cool thing?
65

66
00:04:33,240 --> 00:04:35,200
I'll organize my imports,
66

67
00:04:35,310 --> 00:04:36,140
Control Shift O,
67

68
00:04:36,870 --> 00:04:44,660
and let's restart and you'd see that the service would continue working. In this brief step,
68

69
00:04:44,700 --> 00:04:49,110
we created a simple helloWorld request.
